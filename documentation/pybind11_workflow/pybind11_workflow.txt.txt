#######################################
How to Setup pybind11 libs
#######################################
pybind11 is a header-only module, thereby the following steps are
sufficient to use pybind11 fncts:

1) Clone pybind11 repo
2) Setup CMake managed cpp program
3) Include pybind11 headers in CMakeLists.txt with add_subdirectory(pybind11)


#######################################################
How to use pybind11 to use cpp compiled code for pyhton
#######################################################
pybind11 creates a module with cpp functions that can 
be imported in python projects:

1) In CMakeLists.txt create the module with 
set(MODULE_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/module")
file(MAKE_DIRECTORY ${MODULE_OUTPUT_DIRECTORY})
set_target_properties(module_name PROPERTIES
		      LIBRARY_OUTPUT_DIRECTORY
		      ${MODULE_OUTPUT_DIRECTORY}
		      )
2) Create a cpp file, declare any class or function to be used in python
3) #include <pybind11/pybind11.h>
4) Create Pybind11_Module by calling PYBIND11_MODULE(module_name, handle){ .. }
5) inside { .. } include cpp functions inside module 
   by handle.def( "<function name in python>", & <reference to cpp func> )
6) inside { .. } include classes by pybind11::class_<ClassToBeAdded>(handle, <python class name>)
   .def(pybind11::init<inputargs datatypes>()) //constructor
   .def(<python member function name>, & <reference to cpp memberfunction>) 



